#!/usr/bin/ruby
OBJC = <<-__EOBJC__

#import <SenTestingKit/SenTestingKit.h>
#import "YOLO.h"

@interface Thingy : NSObject
@property (nonatomic) NSString *title;
@end
@implementation Thingy
@end


int main() {
    unlink("/tmp/YOLOtests.m");  //before orâ€¦ doesn't happen! FFS
    unlink("/tmp/YOLOtests");

    @autoreleasepool {
        SenSelfTestMain();
    }
}


@interface GeneralTests : SenTestCase
@end


@implementation GeneralTests

- (void)testIndexOfSuccess {
    NSUInteger u = @[@1, @2, @3].indexOf(@2);
    STAssertEquals(u, 1ul, @"");
}

- (void)testIndexOfFailure {
    NSUInteger u = @[@1, @2, @3].indexOf(@4);
    STAssertEquals(u, NSNotFound, @"");
}

- (void)testPop {
    NSMutableArray *aa = @[@1, @2, @3].mutableCopy;
    [aa pop];
    STAssertEquals(aa.count, 2ul, @"");
    id bb = @[@1, @2];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testUniq {
    NSArray *aa = @[@1, @2, @3, @3, @2, @2, @1].uniq;
    STAssertEquals(aa.count, 3ul, @"");
    id aaa = @[@1, @2, @3];
    STAssertEqualObjects(aaa, aa, @"");
}

- (void)testExtendForm1 {
    NSDictionary *dict = @{@1: @2, @3: @4, @5: @6};
    id other = dict.extend(@{@3: @5});
    STAssertEqualObjects(other[@3], @5, @"");
}

- (void)testExtendForm2 {
    NSDictionary *dict = @{@1: @2, @3: @4, @5: @6};
    id other = dict.extend(@3, @9);
    STAssertEqualObjects(other[@3], @9, @"");
}

- (void)testConcat {
    NSArray *objs = @[@1, @2, @3];
    objs = objs.concat(objs);
    id objs2 = @[@1, @2, @3, @1, @2, @3];
    STAssertEqualObjects(objs, objs2, @"");

    NSArray *aa = @[@1, @2, @3].concat(@[@3, @4, @5]);
    id bb = @[@1, @2, @3, @3, @4, @5];
    STAssertEqualObjects(aa, bb, @"");

    aa = @[@1, @2, @3, @4, @5];
    aa = aa.skip(2).concat(aa.snip(2));
    bb = @[@3, @4, @5, @1, @2, @3];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testLast {
    id aa = @[@1,@2,@3,@4,@5].last(3);
    id bb = @[@3, @4, @5];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testFirst {
    id aa = @[@1,@2,@3,@4,@5].first(3);
    id bb = @[@1, @2, @3];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testEach {
    __block int x = 0;
    @[@1, @2, @3].each(^(id o){
        STAssertEqualObjects(o, @(++x), @"");
    });
}

- (void)testSelect {
    id aa = @[@1, @2, @3, @4].select(^BOOL(id o) {
        return [o intValue] % 2 == 0;
    });
    id bb = @[@2, @4];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testMin {
    id a = @[@19, @29, @4, @5, @6].min(^NSInteger(id o) {
        return [o integerValue];
    });
    STAssertEquals([a intValue], 4, @"");
}

- (void)testMax {
    id a = @[@19, @29, @4, @5, @6].max(^NSInteger(id o) {
        return [o integerValue];
    });
    STAssertEquals([a intValue], 29, @"");
}

- (void)testFlatten {
    id a = @[@1, @[@1, @2], @[@1, @[@1, @2, @[@1, @[@2, @3]]], @2]];
    STAssertEquals([a flatten].count, 10ul, @"");
}

- (void)testFlatMap {
    id aa = @[@1, @2, @3].flatMap(^(id o){
        return @[o, @[o]];
    });
    id bb = @[@1, @[@1], @2, @[@2], @3, @[@3]];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testGroupBy {
    id aa = @[@1, @2, @3, @4].groupBy(^(NSNumber *n) {
        return @(n.intValue % 2);
    });
    id bb = @{@0: @[@2, @4], @1: @[@1, @3]};
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testReduce {
    NSNumber *sum = @[@1, @2, @3, @4].reduce(^(NSNumber *memo, NSNumber *num){
        return @(num.intValue + memo.intValue);
    });
    STAssertEquals(sum.intValue, 10, @"");
}

- (void)testSlice {
    id aa = @[@1, @2, @3, @4, @5].slice(1, 2);
    id bb = @[@2, @3];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testOverslice {
    NSArray *aa = @[@1, @2, @3, @4];
    id bb = aa.slice(0, 10);
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testEmptySlice {
    NSArray *bb = @[].slice(3, 10);
    STAssertEquals(bb.count, 0ul, @"");
}

- (void)testEmptyFirst {
    NSArray *bb = @[].first(3);
    STAssertEquals(bb.count, 0ul, @"");
}

- (void)testEmptyLast {
    NSArray *bb = @[].last(3);
    STAssertEquals(bb.count, 0ul, @"");
}

- (void)testGet {
    STAssertEquals([@{@1:@2}.get(@1) intValue], 2, @"");
}

- (void)testPMap {
    NSUInteger const count = 50000;
    NSArray *nums = @(1).upTo(count);
    id aa = nums.pmap(^(NSNumber *num){
        return @(num.intValue * num.intValue);
    });
    id bb = nums.map(^(NSNumber *num){
        return @(num.intValue * num.intValue);
    });
    STAssertEquals(count, nums.count, @"");
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testUpto {
    id aa = @(4).upTo(6);
    id bb = @[@4, @5, @6];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testPluck {
    Thingy *shape1 = [Thingy new]; shape1.title = @"shape 1";
    Thingy *shape2 = [Thingy new]; shape2.title = @"shape 2";

    id aa = @[shape1, shape2].pluck(@"title.uppercaseString");
    id bb = @[@"SHAPE 1", @"SHAPE 2"];
    STAssertEqualObjects(bb, aa, @"");
}

- (void)testSelectClass {
    id bb = @[@1, @"a", @[]].select(NSNumber.class);
    STAssertEqualObjects(bb, @[@1], @"");
}

- (void)testRejectClass {
    id bb = @[@1, @"a", @[]].reject(NSNumber.class);
    id aa =  @[@"a", @[]];
    STAssertEqualObjects(bb, aa, @"");
}

- (void)testSortBy {
    id c = @{@3: @"c"};
    id a = @{@1: @"a"};
    id b = @{@2: @"b"};
    id aa = @[c, a, b].sortBy(^(NSDictionary *o){
        return o.allKeys.firstObject;
    });
    id bb = @[[a copy], [b copy], [c copy]];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testReverse {
    id aa = @[@5, @4, @3, @2, @1];
    id bb = @[@1, @2, @3, @4, @5].reverse;
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testJoin {
    NSArray *aa = @[@"a", @1, @"b"];
    id bb = @"a1b";
    STAssertEqualObjects(aa.join(@""), bb, @"");
    STAssertEqualObjects(aa.join(nil), bb, @"");
}

- (void)testTranspose {
    id aa = @[@[@1, @2], @[@3, @4], @[@5, @6]].transpose;
    id bb = @[@[@1, @3, @5], @[@2, @4, @6]];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testShift {
    NSMutableArray *aa = [NSMutableArray arrayWithObjects:@1, @2, @3, nil];
    STAssertEqualObjects(aa.shift, @1, @"");
    STAssertEquals(aa.count, 2ul, @"");
}

- (void)testSample {
    id aa = @[@1, @2, @3].sample;
    STAssertNotNil(aa, @"");
}

- (void)testPush {
    id aa = [NSMutableArray new].push(@1).push(@2).copy;
    id bb = @[@1, @2];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testEmpty {
    STAssertTrue(@[].empty, @"");
    STAssertFalse(@[@1].empty, @"");
}

- (void)testString {
    id aa = @"1,2,3,4".split(@",");
    id bb = @[@"1", @"2", @"3", @"4"];
    STAssertEqualObjects(aa, bb, @"");
}

- (NSArray *)array:(NSUInteger)count {
    id objs[count];
    for (NSUInteger x = 0; x < count; ++x)
        objs[x] = @(arc4random());
    return [NSArray arrayWithObjects:objs count:count];
}

- (void)testShuffle {
    // obviously there is no good test for shuffle, but we can check that the
    // resulting array has certain characteristics

    NSArray *aa = [self array:50];
    NSArray *bb = aa.shuffle;
    STAssertEquals(aa.count, bb.count, @"");
    STAssertEqualObjects(aa.sort, bb.sort, @"");
}

- (void)testUnshift {
    NSMutableArray *aa = @[@4, @5, @6].mutableCopy;
    aa.unshift(@3).unshift(@2).unshift(@1);
    id bb = @[@1, @2, @3, @4, @5, @6];
    STAssertEqualObjects(bb, aa, @"");
}

- (void)testSnip {
    id aa = @[@1, @2, @3, @4, @5].snip(2);
    id bb = @[@1, @2, @3];
    STAssertEqualObjects(bb, aa, @"");
}

- (void)testSkip {
    id aa = @[@1, @2, @3, @4, @5].skip(2);
    id bb = @[@3, @4, @5];
    STAssertEqualObjects(bb, aa, @"");
}

- (void)testRotate {
    id aa = @[@1, @2, @3, @4].rotate(2);
    id bb = @[@3, @4, @1, @2];
    STAssertEqualObjects(aa, bb, @"");

    id cc = @[@1, @2, @3, @4].rotate(-2);
    id dd = @[@3, @4, @1, @2];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testPushNil {
    NSMutableArray *ma = @[].mutableCopy;
    STAssertEquals(0ul, ma.push(nil).count, @"");
}

- (void)testUnshiftNil {
    NSMutableArray *ma = @[@1].mutableCopy;
    STAssertEquals(1ul, ma.unshift(nil).count, @"");
}

- (void)testMultiSort {
    id frank12 = @{@"name": @"frank", @"age": @12};
    id zane = @{@"name": @"zane", @"age": @1};
    id bob = @{@"name": @"bob", @"age": @54};
    id frank31 = @{@"name": @"frank", @"age": @31};
    id frank32 = @{@"name": @"frank", @"age": @32};

    NSArray *aa = @[frank32, frank31, bob, zane, frank12];

    id bb = aa.sortBy(^(id o){
        return @[o[@"name"], o[@"age"]];
    });

    id cc = @[
        [bob copy],
        [frank12 copy],
        [frank31 copy],
        [frank32 copy],
        [zane copy]
    ];

    STAssertEqualObjects(bb, cc, @"");
}

- (void)testTransposeWithNonEqualCounts {
    id aa = @[@[@1, @2, @3], @[@1, @2]].transpose;
    id bb = @[@[@1, @1], @[@2, @2], @[@3]];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testTransposeNothing {
    id aa = @[].transpose;
    id bb = @[];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testTransposeFlat {
    id aa = @[@1].transpose;
    id bb = @[];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testTransposeOneArray {
    id aa = @[@[@1, @2, @3]].transpose;
    id bb = @[@[@1], @[@2], @[@3]];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testMixedSort {
    NSArray *aa = @[@"20", @4, @"3", @5].sort;
    NSArray *bb = @[@"3", @4, @5, @"20"];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testAll {
    BOOL b = @[@1, @2, @3].all(^BOOL(id o){
        return [o intValue] > 0;
    });
    STAssertTrue(b, @"");

    BOOL c = @[@1, @2, @3].all(^BOOL(id o){
        return [o intValue] > 1;
    });
    STAssertFalse(c, @"");
}

- (void)testAllClass {
    BOOL d = @[@1, @2, @3].all(NSNumber.class);
    STAssertTrue(d, @"");

    d = @[@"1", @"2", @"3"].all(NSString.class);
    STAssertTrue(d, @"");

    d = @[@"1", @2, @"3"].all(NSString.class);
    STAssertFalse(d, @"");
}

- (void)testStringSort {
    id aa = @[@"103", @"11", @"10", @"12"].sort;
    id bb = @[@"10", @"11", @"12", @"103"];
    STAssertEqualObjects(aa, bb, @"");
}

- (void)testNone {
    BOOL b = @[@"1", @"2", @"3"].none(NSNumber.class);
    STAssertTrue(b, @"");

    b = @[@1, @"2", @"3"].none(NSNumber.class);
    STAssertFalse(b, @"");

    b = @[@"1", @"2", @"3"].none(NSString.class);
    STAssertFalse(b, @"");
}

- (void)testPluckNil {
    NSArray *aa = @[@1];
    STAssertEqualObjects(aa.pluck(nil), aa, @"");
}

- (void)testPluckEmpty {
    NSArray *aa = @[@1];
    STAssertEqualObjects(aa.pluck(@""), aa, @"");
}

- (void)testUpToFromNegative {
    NSArray *aa = @(-5).upTo(20);
    STAssertEquals([aa[0] intValue], -5, @"");
    STAssertEquals([aa[25] intValue], 20, @"");
}

- (void)testInject {
    id aa = @[@1, @2, @3].inject(@{}, ^(id memo, NSNumber *value){
        memo[value] = @(value.intValue * 2);
        return memo;
    });
    id bb = @{@1: @2, @2: @4, @3: @6};
    STAssertEqualObjects(aa, bb, @"");
    STAssertFalse([aa isKindOfClass:[NSMutableDictionary class]], @"");
}

@end

__EOBJC__

FRAMEWORKS = "/Applications/Xcode.app/Contents/Developer/Library/Frameworks"

File.open('/tmp/YOLOtests.m', 'w') do |f|
  f.puts("\n")  # make line numbers line up
  f.puts(OBJC)
end

system <<-EOS
  clang -g -O0 -ObjC -F#{FRAMEWORKS} -I. -fmodules -fobjc-arc \
        -framework SenTestingKit \
        /tmp/YOLOtests.m *.m -o /tmp/YOLOtests
EOS
system <<-EOS
    install_name_tool -change \
        @rpath/SenTestingKit.framework/Versions/A/SenTestingKit \
        #{FRAMEWORKS}/SenTestingKit.framework/SenTestingKit \
        /tmp/YOLOtests
EOS

exec "/tmp/YOLOtests"
